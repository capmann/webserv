#Changes from NGINX conf file: 
#   1. sections are among []
#   2. directives and values are separated by a '='
#   3. authorized methods replaces limit_exception
#   4. location_match only include exact match
#   5. if there are several listen ports in a server, only the last one will be taken into account
#   6. if there is no listen directive, the server will not open any port for this virtual host
#   7. only one listen directive per virtual host
#   8. cgis must not be in a location block

#Rules of the conf file:
#   1. Mandatory in server section: listen port, server_name, at least 1 location
#   2. Optional in server section: root, error_page, max_body_size, cgi, index
#   3. Mandatory in location section: redirection or (root + authorized methods)
#   4. Optional in location section: autoindex on/off, redirection, upload_path
#   5. There can be multiple servers (even with the same port) and multiple locations per server
#   6. root path and location path contain no end slash

#Definitions:
#   1. server_name: the name of your domain. In any case, the request will point to localhost (127.0.0.1) IP address
        #but the "host" of the request can correspond to server_name
#   2. autoindex: generates an automatic listing of the required directory. 
#       For example, if the autoindex of /uploads in on, the web page will be a listing of the content of the /uploads folder
#   3. listen: defines the IP address and the port to which the server block will answer. Can be an IP address, a port, or both. 
        #If the port is not specified, the default port 8080 will be attributed.
        #If the IP address is not specified, the default address 0.0.0.0 will be attributed.
        #The server that will serve the request is the one that matches most the IP + port specified in the request.
        #If several servers have the same level of specifity, the server chosen will be the one where server_name = host of the request
        #If there are still several servers, the default one will be chosen = the first one.
#   4. location directive: defines with which element the server should compare the URI of the request
    #URI = the part after the IP + port of the browser
    #the correspondance can be of several types: prefix, exact, case sensitive...
    #Here, we only care about prefix and exact 
    #if there are several correspondance, the longest one will be chosen
#   5. root: path to the files requested. 
    #If in the location block, the location_match is added after the root directive
    #If there is a root directive before the location block, it is overriden by the one in the location block
#   6. cgi: https://www.nginx.com/resources/wiki/start/topics/examples/fastcgiexample/
#   7. uploads: receive a string and creating the file inside /uploads (provide the path inside the conf file)
#   8. redirection: redirects the location to redirection place (ex. if location = /uploads, the url should lead to /uploads but
        #it will actually lead to redirection path). Used for cybersecurity issues for instance
#   9. index: will be the default file to display in case the uri is a directory | index must be inside location!
#   10. if there is no index, and autoindex is on, it will generate the directory listing


#https://www.digitalocean.com/community/tutorials/understanding-nginx-server-and-location-block-selection-algorithms-fr
#https://docs.nginx.com/nginx/admin-guide/web-server/serving-static-content/
#http://nginx.org/en/docs/beginners_guide.html#:~:text=For%20matching%20requests%2C%20the%20URI,one%20with%20the%20longest%20prefix.

[server]

    listen                  = 8080;

    server_name             = example.org | www.example.org;
  
    root                    = srcs/Server/www;

    upload_path             = /uploads;

    error_page              = /404notfound.html | /400badrequesterror.html;

    client_max_body_size    = 1000000;

    cgi                     = .py:/usr/bin/python | .pl:/usr/bin/perl;

    [location /]
  
        index               = coucou.html | index.html;
        autoindex           = on;
        authorized_methods  = GET | POST;

    [location /images]

        index               = index.html
        root                = srcs/Server/www/images;
        authorized_methods  = GET | DELETE;

    [location /forms]

        autoindex           = on;
        authorized_methods  = GET | POST;

    [location /delete]

        authorized_methods  = DELETE;

    [location /test]

        index = test.html
        # autoindex           = off;
        # autoindex           = on;
        root                = srcs/Server/www/test;
        authorized_methods  = GET | DELETE;

    [location /42]

        authorized_methods  = GET | DELETE;
		redirection = 301:https://42.fr/


[server] 

    listen                  =  localhost:8081;

    root                    =  srcs/Server/www;

    server_name             = example.com;

    upload_path             = /uploads;
    
    cgi                     = .py:/usr/bin/python | .pl:/usr/bin/perl;
    
    [location /] 

        autoindex           = on;
        authorized_methods  = GET | DELETE | POST;

    [location /uploads]

        root                = srcs/Server/www/uploads;
        authorized_methods  = GET | DELETE | POST;

    [location /app]
  
        authorized_methods  = GET | POST;


[server]

    listen                  =  localhost:4430;

    root                    =  srcs/Server/www;

    server_name             = google.com;

    upload_path             = /uploads;
    
    [location /]

        index               = google.html;
        authorized_methods  = GET | DELETE;

    [location /sound]
    
        root                = srcs/Server/www/sound;
        authorized_methods  = GET | DELETE;

    [location /uploads]

        index               = index.html;
        root                = srcs/Server/www/uploads;
        authorized_methods  = GET | POST;

    [location /app]
  
        authorized_methods  = GET;
        redirection         = 301:/uploads;
    
    [location /google]
  
        authorized_methods  = GET;
        redirection         = 301:https://google.com;